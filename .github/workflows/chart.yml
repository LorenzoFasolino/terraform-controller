name: Chart
on:
  push:
    branches:
      - master
    tags:
      - "v*"
  workflow_dispatch: {}

env:
  BUCKET: kubevelacharts
  ENDPOINT: oss-cn-hangzhou.aliyuncs.com
  ACCESS_KEY: ${{ secrets.OSS_ACCESS_KEY }}
  ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}
  HELM_CHART: chart
  LOCAL_OSS_DIRECTORY: .oss/

jobs:
  chart-build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master
      - name: Get the version
        id: get_version
        run: |
          tag=${GITHUB_REF#refs/tags/}
          VERSION=${tag#"v"}
          if [[ ${GITHUB_REF} == "refs/heads/master" ]]; then
            VERSION=latest
          fi
          echo ::set-output name=VERSION::${VERSION}
      - name: Get git revision
        id: vars
        shell: bash
        run: |
          echo "::set-output name=git_revision::$(git rev-parse --short HEAD)"

      - name: Login docker.io
        uses: docker/login-action@v1
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
        with:
          driver-opts: image=moby/buildkit:master

      - uses: docker/build-push-action@v2
        name: Build & Pushing terraform controller for Dockerhub
        with:
          context: .
          file: Dockerfile
          labels: |-
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            GITVERSION=git-${{ steps.vars.outputs.git_revision }}
            VERSION=${{ steps.get_version.outputs.VERSION }}
            GOPROXY=https://proxy.golang.org
          tags: |-
            docker.io/oamdev/terraform-controller:${{ steps.get_version.outputs.VERSION }}


      - uses: actions/checkout@master
      - name: Get git revision
        id: vars
        shell: bash
        run: |
          echo "::set-output name=git_revision::$(git rev-parse --short HEAD)"
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.4.0
      - uses: oprypin/find-latest-tag@v1
        with:
          repository: oam-dev/terraform-controller
          releases-only: true
        id: latest_tag
      - name: Tag helm chart image
        run: |
          latest_repo_tag=${{ steps.latest_tag.outputs.tag }}
          sub="."
          image_tag=${GITHUB_REF#refs/tags/}
          chart_version=$latest_repo_tag
          if [[ ${GITHUB_REF} == "refs/heads/master" ]]; then
            image_tag=latest
            chart_version=nightly-build
          fi
          # sed -i "s/0.2.8/${image_tag}/g" $HELM_CHART/Makefile
          chart_smever=${chart_version#"v"}
          sed -i "s/0.2.8/$chart_smever/g" $HELM_CHART/Chart.yaml
          sed -i "s/0.2.8/${chart_smever}/g" $HELM_CHART/values.yaml

      - name: Install ossutil
        run: wget http://gosspublic.alicdn.com/ossutil/1.7.0/ossutil64 && chmod +x ossutil64 && mv ossutil64 ossutil
      - name: Configure Alibaba Cloud OSSUTIL
        run: ./ossutil --config-file .ossutilconfig config -i ${ACCESS_KEY} -k ${ACCESS_KEY_SECRET} -e ${ENDPOINT} -c .ossutilconfig
      - name: sync cloud to local
        run: ./ossutil --config-file .ossutilconfig cp oss://$BUCKET/addons/index.yaml $LOCAL_OSS_DIRECTORY -f

      - name: Package helm charts
        run: |
          helm package $HELM_CHART --destination $LOCAL_OSS_DIRECTORY
          helm repo index --url https://charts.kubevela.net/addons $LOCAL_OSS_DIRECTORY/ --merge $LOCAL_OSS_DIRECTORY/index.yaml

      - name: sync local to cloud
        run: ./ossutil --config-file .ossutilconfig sync $LOCAL_OSS_DIRECTORY oss://$BUCKET/addons -f
